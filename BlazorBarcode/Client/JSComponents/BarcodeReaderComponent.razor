@inject IJSRuntime IJSRuntime
@inject Inventory.InventoryClient InventoryClient

<style>

	/* In order to place the tracking correctly */
	canvas.drawing, canvas.drawingBuffer, .drawingBuffer {
		position: absolute;
		left: inherit;
		top: inherit;
		display: none;
		border-radius: 10px;
	}
</style>

<div class="form-inline">
	<div class="form-group mb-2">
		<input id="searchText" class="form-control" type="search" width="30" placeholder="Scan or search" @onchange="@((ChangeEventArgs __e) => AddItem(__e) )" list="products-autocomplete" value="@searchText" />
		<button type="button" class="btn btn-primary">
			<i class="fa fa-search" aria-hidden="true"></i>
			Search
		</button>
	</div>
	<div class="form-group mx-sm-3 mb-2">
		<button id="btn-show-scanner" class="btn btn-primary" @onclick="Reader">
			<i class="fa fa-search-plus" aria-hidden="true"></i>
			Scan
		</button>
	</div>
	
</div>

<div id="div-video-container">
	<video class="dbrScanner-video" playsinline="true"></video>
</div>




@code {

	[Parameter]
	public string searchText { get; set; }

	[Parameter]
	public EventCallback<string> GetValue { get; set; }

	[Parameter]
	public EventCallback<string> OnBarcodeDetected { get; set; }

	private async Task Reader()
	{
		await IJSRuntime.InvokeVoidAsync("read", DotNetObjectReference.Create(this));
	}

	async Task AddItem(ChangeEventArgs evt)
	{
		Console.WriteLine(evt.Value.ToString());
		var ean = evt.Value.ToString().ToLower();
		await OnBarcodeDetected.InvokeAsync(ean);
		searchText = "";
	}


	[JSInvokable]
	public void SetReturnValue(string value)
	{
		GetValue.InvokeAsync(value);
		StateHasChanged();
	}

}
